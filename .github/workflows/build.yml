name: build
on: [push, pull_request]
jobs:
  build:
    strategy:
      matrix:
        platform:
          - name: linux-gnu
            os: ubuntu
            target: x86_64-unknown-linux-gnu
          - name: linux-musl
            os: ubuntu
            target: x86_64-unknown-linux-musl
          - name: windows
            os: windows
            target: x86_64-pc-windows-msvc
    name: build [${{ matrix.platform.name }}]
    runs-on: ${{ matrix.platform.os }}-latest
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v3
      - name: Set up rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.platform.target }}
      - name: Set up musl-gcc
        if: matrix.platform.name == 'linux-musl'
        run: |
          sudo apt-get install musl-tools -y
      - name: Cache rust artifacts
        uses: Swatinem/rust-cache@v1
        with:
          key: ${{ matrix.platform.name }}
      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --target ${{ matrix.platform.target }} --locked --path . --root pandoc-katex
      - name: Package (Linux)
        if: matrix.platform.os != 'windows'
        run: |
          cp LICENSE-* ./pandoc-katex
          tar -C ./pandoc-katex -czf "pandoc-katex-$(git describe --tags --always)-${{ matrix.platform.target }}.tar.gz" .
      - name: Package (Windows)
        if: matrix.platform.os == 'windows'
        run: |
          $version = git describe --tags --always
          Copy-Item -Path "LICENSE-*" -Destination pandoc-katex
          Compress-Archive -Path "pandoc-katex\*" -DestinationPath "pandoc-katex-$($version)-${{ matrix.platform.target }}.zip"
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.platform.name }}
          path: pandoc-katex-*

  build-macos:
    name: build [macos]
    runs-on: macos-11.0
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v3
      - name: Set up rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: beta
          target: x86_64-apple-darwin
          default: true
      - name: Install aarch64-apple-darwin target
        run: |
          rustup target add aarch64-apple-darwin
      - name: Cache rust artifacts
        uses: Swatinem/rust-cache@v1
      - name: Run cargo build [x86_64]
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --target x86_64-apple-darwin --locked --path . --root pandoc-katex-x86_64
      - name: Run cargo build [aarch64]
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --target aarch64-apple-darwin --locked --path . --root pandoc-katex-aarch64
      - name: Package
        run: |
          mkdir -p pandoc-katex/bin
          lipo -create -output pandoc-katex/bin/pandoc-katex pandoc-katex-{x86_64,aarch64}/bin/pandoc-katex
          cp LICENSE-* ./pandoc-katex
          tar -C ./pandoc-katex -czf "pandoc-katex-$(git describe --tags --always)-universal-apple-darwin.tar.gz" .
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: macos
          path: ./pandoc-katex-*.tar.gz

  deploy-crate:
    if: startsWith(github.ref, 'refs/tags/')
    name: "deploy crate"
    runs-on: ubuntu-latest
    needs: [build, build-macos]
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v3
      - name: Set up rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Login to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: login
          args: ${{ secrets.CRATES_TOKEN }}
      - name: Run cargo publish
        uses: actions-rs/cargo@v1
        with:
          command: publish

  deploy-artifacts:
    if: startsWith(github.ref, 'refs/tags/')
    name: "deploy artifacts"
    runs-on: ubuntu-latest
    needs: [build, build-macos]
    steps:
      - name: Get release version
        run: |
          TAG_VERSION="${GITHUB_REF#refs/tags/}"
          echo "TAG_VERSION=${TAG_VERSION}" >> $GITHUB_ENV
          echo "version is: ${TAG_VERSION}"
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: .
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_VERSION }}
          name: Release ${{ env.TAG_VERSION }}
          draft: true
          files: |
            **/pandoc-katex-*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
